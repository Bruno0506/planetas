from picamera2 import Picamera2
from PIL import Image
import numpy as np
import cv2

# Inicializar la cámara
picam2 = Picamera2()
picam2.start()  # Iniciar la cámara

# Capturar una imagen
image = picam2.capture_array()

# Verifica si la imagen se capturó correctamente
if image is not None:
    # Convertir la imagen a un formato que pueda usar OpenCV
    image_cv = cv2.cvtColor(image, cv2.COLOR_RGB2BGR)

    # Cargar YOLO
    net = cv2.dnn.readNet('yolov4.weights', 'yolov4.cfg')
    layer_names = net.getLayerNames()
    output_layers = [layer_names[i[0] - 1] for i in net.getUnconnectedOutLayers()]

    # Obtener las dimensiones de la imagen
    height, width = image_cv.shape[:2]

    # Crear el blob y pasarlo a la red
    blob = cv2.dnn.blobFromImage(image_cv, 0.00392, (416, 416), (0, 0, 0), True, crop=False)
    net.setInput(blob)

    # Realizar la detección
    outputs = net.forward(output_layers)

    # Procesar la salida
    boxes = []
    confidences = []
    class_ids = []

    for output in outputs:
        for detection in output:
            scores = detection[5:]  # Obtener las puntuaciones
            class_id = np.argmax(scores)
            confidence = scores[class_id]
            if confidence > 0.5:  # Umbral de confianza
                center_x = int(detection[0] * width)
                center_y = int(detection[1] * height)
                w = int(detection[2] * width)
                h = int(detection[3] * height)

                # Cálculo de las coordenadas del cuadro delimitador
                x = int(center_x - w / 2)
                y = int(center_y - h / 2)

                boxes.append([x, y, w, h])
                confidences.append(float(confidence))
                class_ids.append(class_id)

    # Aplicar supresión de no máximos
    indexes = cv2.dnn.NMSBoxes(boxes, confidences, 0.5, 0.4)

    # Dibujar los cuadros delimitadores
    for i in range(len(boxes)):
        if i in indexes:
            x, y, w, h = boxes[i]
            label = str(classes[class_id
