wget https://github.com/AlexeyAB/darknet/releases/download/yolov4/yolov4.weights



import cv2
import numpy as np
from picamera2 import Picamera2, Preview
import time

# Configurar Picamera2
picam2 = Picamera2()
camera_config = picam2.create_preview_configuration(main={"size": (640, 480), "format": "RGB888"})
picam2.configure(camera_config)
picam2.start()

# Esperar a que la cámara se inicialice
time.sleep(2)

# Cargar el modelo YOLOv4-tiny (recomendado para Raspberry Pi)
net = cv2.dnn.readNet("model/yolov4-tiny.weights", "model/yolov4-tiny.cfg")

# Leer las clases para el modelo
with open("model/my_classes.name", "r") as f:
    classes = [line.strip() for line in f.readlines()]

# Obtener las capas de salida para el modelo
layer_names = net.getLayerNames()
output_layers = [layer_names[i - 1] for i in net.getUnconnectedOutLayers()]

# Configurar para CPU
net.setPreferableBackend(cv2.dnn.DNN_BACKEND_DEFAULT)
net.setPreferableTarget(cv2.dnn.DNN_TARGET_CPU)

# Inicializar variables
prev_time = time.time()
real_width_of_object = 0.6  # Ancho real del objeto en metros (ejemplo: 60 cm)

while True:
    # Capturar un fotograma de la cámara
    frame = picam2.capture_array()

    # Reducir resolución para procesamiento más rápido
    scale = 0.5
    frame_resized = cv2.resize(frame, (0, 0), fx=scale, fy=scale)
    height, width, _ = frame_resized.shape

    # Crear blob
    blob = cv2.dnn.blobFromImage(frame_resized, 0.00392, (320, 320), (0, 0, 0), True, crop=False)

    # Ejecutar detección
    net.setInput(blob)
    detections = net.forward(output_layers)

    boxes, confidences, class_ids = [], [], []

    # Procesar las detecciones
    for output in detections:
        for detection in output:
            scores = detection[5:]
            class_id = np.argmax(scores)
            confidence = scores[class_id]
            if confidence > 0.6 and classes[class_id] == "persona":  # Umbral de confianza ajustado
                center_x = int(detection[0] * width / scale)
                center_y = int(detection[1] * height / scale)
                w = int(detection[2] * width / scale)
                h = int(detection[3] * height / scale)
                x = int(center_x - w / 2)
                y = int(center_y - h / 2)
                boxes.append([x, y, w, h])
                confidences.append(float(confidence))
                class_ids.append(class_id)

    # Aplicar Non-Maximum Suppression
    indexes = cv2.dnn.NMSBoxes(boxes, confidences, score_threshold=0.5, nms_threshold=0.4)

    # Dibujar las detecciones
    for i in range(len(boxes)):
        if i in indexes:
            x, y, w, h = boxes[i]
            label = classes[class_ids[i]]
            confidence = confidences[i]

            # Dibujar cuadro y texto
            color = (0, 255, 0)
            cv2.rectangle(frame, (x, y), (x + w, y + h), color, 2)
            cv2.putText(frame, f"{label} {confidence:.2f}",
                        (x, y - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, color, 2)

    # Calcular y mostrar FPS
    current_time = time.time()
    fps = 1 / (current_time - prev_time)
    prev_time = current_time
    print(f"FPS: {fps:.2f}")
    cv2.putText(frame, f"FPS: {fps:.2f}", (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)

    # Mostrar el fotograma con OpenCV
    cv2.imshow("Detección de Personas", frame)

    # Salir si se presiona 'q'
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Finalizar y liberar recursos
picam2.close()
cv2.destroyAllWindows()
